from apscheduler.schedulers.background import BackgroundScheduler
from telebot import TeleBot, State, custom_filters
from telebot.states import StatesGroup

from bot.scheduler import ReminderScheduler, Reminder
from db.db_core import Database
from db.models import Word, User
from db.user import UserManager
from handlers.buttons import get_confirmation_markup, get_cancel_markup
from utils.config import Config


class MyStates(StatesGroup):
    waiting_for_english_word = State()
    waiting_for_translation = State()
    waiting_for_confirmation = State()
    waiting_for_deletion = State()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def save_cancel_message_id(bot, user_id, chat_id, cancel_message):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫, –∫–æ–≥–¥–∞ –æ–Ω–∏ —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã.
    """
    with bot.retrieve_data(user_id, chat_id) as data:
        data['cancel_message_id'] = cancel_message.message_id


def check_if_command(bot, message):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π. –ï—Å–ª–∏ –¥–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ.
    """
    if message.text.startswith('/'):
        bot.delete_state(message.from_user.id, message.chat.id)
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.")
        return True
    return False


class Bot:
    def __init__(self):
        self.bot = TeleBot(Config.TELEGRAM_TOKEN)
        self.bot.add_custom_filter(custom_filters.StateFilter(self.bot))
        self.db = Database()
        # self.logger = Logger()
        self.scheduler = BackgroundScheduler()
        self.reminder_scheduler = ReminderScheduler(self.bot, self.scheduler)
        self.register_handlers()

    def register_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def send_welcome(message):
            username = message.from_user.username
            chat_id = message.chat.id

            with next(self.db.get_session()) as db_session:
                user_manager = UserManager(db_session)
                user_manager.get_or_create_user(chat_id)
                self.bot.send_message(
                    chat_id,
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ –≠–±–±–∏–Ω–≥–∞—É–∑–∞! üìö\n"
                    "\n"
                    "üî† –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤, –Ω–∞–∂–º–∏ /add –∏ –≤–≤–µ–¥–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:\n"
                    "\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä, üá¨üáßworld\n"
                    "–ó–∞—Ç–µ–º —è –ø–æ–ø—Ä–æ—à—É —Ç–µ–±—è –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä, üá∑üá∫–º–∏—Ä\n"
                    "\n"
                    "üïí –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ —Å–ª–æ–≤–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏, —á—Ç–æ–±—ã —É —Ç–µ–±—è –±—ã–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Ö –∑–∞–ø–æ–º–Ω–∏—Ç—å.\n –í–æ—Ç –≥—Ä–∞—Ñ–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n"
                    "\n"
                    f"1Ô∏è‚É£ –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - —á–µ—Ä–µ–∑ {Reminder.FIRST_REMINDER};\n"
                    f"2Ô∏è‚É£ –í—Ç–æ—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - —á–µ—Ä–µ–∑ {Reminder.SECOND_REMINDER};\n"
                    f"3Ô∏è‚É£ –¢—Ä–µ—Ç—å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - —á–µ—Ä–µ–∑ {Reminder.THIRD_REMINDER};\n"
                    f"4Ô∏è‚É£ –ß–µ—Ç–≤–µ—Ä—Ç–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - —á–µ—Ä–µ–∑ {Reminder.FOURTH_REMINDER};\n"
                    f"5Ô∏è‚É£ –ü—è—Ç–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - —á–µ—Ä–µ–∑ {Reminder.FIFTH_REMINDER}.\n"
                    f"6Ô∏è‚É£ –®–µ—Å—Ç–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - —á–µ—Ä–µ–∑ {Reminder.SIXTH_REMINDER}.\n"
                    f"7Ô∏è‚É£ –°–µ–¥—å–º–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - —á–µ—Ä–µ–∑ {Reminder.SEVENTH_REMINDER}.\n"
                    "\n"
                    "‚úçÔ∏è –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π /add\n"
                    "üóëÔ∏è –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /delete\n"
                    "‚ÑπÔ∏è –î–ª—è –≤—ã–∑–æ–≤–∞ —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏ /help\n"
                    "üìñ –£–∑–Ω–∞–π –±–æ–ª—å—à–µ –æ —Å–∏—Å—Ç–µ–º–µ –≠–±–±–∏–Ω–≥–∞—É–∑–∞: /what_is_it"
                )

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏
            # self.logger.add_user_to_json(username)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /what_is_it
        @self.bot.message_handler(commands=['what_is_it'])
        def send_what_is_it(message):
            text = (
                "[–ö—Ä–∏–≤–∞—è –∑–∞–±—ã–≤–∞–Ω–∏—è –≠–±–±–∏–Ω–≥–∞—É–∑–∞](https://ru.wikipedia.org/wiki/%D0%9A%D1%80%D0%B8%D0%B2%D0%B0%D1%8F_%D0%B7%D0%B0%D0%B1%D1%8B%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)"
            )
            self.bot.send_message(message.chat.id, text, parse_mode="Markdown")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        @self.bot.message_handler(commands=['help'])
        def send_help(message):
            help_text = (
                "–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —É—á–∏—Ç—å —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ —Å–∏—Å—Ç–µ–º–µ –≠–±–±–∏–Ω–≥–∞—É–∑–∞.\n"
                "\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚úçÔ∏è /add - –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n"
                "üóëÔ∏è /delete - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è\n"
                "üìö /my_words - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤\n"
                "\n"
                "üìñ /what_is_it - –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–∏—Å—Ç–µ–º–µ –≠–±–±–∏–Ω–≥–∞—É–∑–∞\n"
                "‚ÑπÔ∏è /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            )
            self.bot.send_message(message.chat.id, help_text)

        @self.bot.message_handler(commands=['add'])
        def start_adding_word(message):
            chat_id = message.chat.id
            cancel_markup = get_cancel_markup()

            cancel_message = self.bot.send_message(chat_id, "–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–ºüá¨üáß", reply_markup=cancel_markup)
            self.bot.set_state(message.from_user.id, MyStates.waiting_for_english_word, chat_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            save_cancel_message_id(self.bot, message.from_user.id, chat_id, cancel_message)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞
        @self.bot.message_handler(state=MyStates.waiting_for_english_word)
        def get_english_word(message):
            if check_if_command(self.bot, message):
                return

            chat_id = message.chat.id
            english_word = message.text.strip()
            cancel_markup = get_cancel_markup()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤
            if not english_word.isalpha() or not english_word.isascii():
                with self.bot.retrieve_data(message.from_user.id, chat_id) as data:
                    cancel_message_id = data.get('cancel_message_id')
                    if cancel_message_id:
                        self.bot.edit_message_reply_markup(chat_id, cancel_message_id, reply_markup=None)

                cancel_message = self.bot.send_message(chat_id,
                                      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã)üá¨üáß",
                                      reply_markup=cancel_markup)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
                save_cancel_message_id(self.bot, message.from_user.id, chat_id, cancel_message)
                return

            # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            with self.bot.retrieve_data(message.from_user.id, chat_id) as data:
                cancel_message_id = data.get('cancel_message_id')
                if cancel_message_id:
                    self.bot.edit_message_reply_markup(chat_id, cancel_message_id, reply_markup=None)

                data['english_word'] = english_word.lower()

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            cancel_message = self.bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–ºüá∑üá∫.\n"
                                                            "–ï—Å–ª–∏ —Å–ª–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –≤–≤–µ–¥–∏ –∏—Ö —Å—Ç—Ä–æ–≥–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=cancel_markup)
            self.bot.set_state(message.from_user.id, MyStates.waiting_for_translation, chat_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            save_cancel_message_id(self.bot, message.from_user.id, chat_id, cancel_message)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤–∞
        @self.bot.message_handler(state=MyStates.waiting_for_translation)
        def get_translation(message):
            if check_if_command(self.bot, message):
                return

            chat_id = message.chat.id
            translation = message.text.strip()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –ø–µ—Ä–µ–≤–æ–¥: —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
            if "," in translation:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—è—Ç—ã–µ, —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                translations = [word.strip() for word in translation.split(",")]
            else:
                # –ï—Å–ª–∏ –∑–∞–ø—è—Ç—ã—Ö –Ω–µ—Ç, —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
                translations = translation.split()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –±—É–∫–≤
            if any(not word.isalpha() or not all("–∞" <= char <= "—è" for char in word.lower()) for word in translations):
                # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
                with self.bot.retrieve_data(message.from_user.id, chat_id) as data:
                    cancel_message_id = data.get('cancel_message_id')
                    if cancel_message_id:
                        self.bot.edit_message_reply_markup(chat_id, cancel_message_id, reply_markup=None)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
                cancel_markup = get_cancel_markup()
                cancel_message = self.bot.send_message(
                    chat_id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (—Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã)üá∑üá∫.\n "
                    "–ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤, –ø–∏—à–∏ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
                    reply_markup=cancel_markup
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
                save_cancel_message_id(self.bot, message.from_user.id, chat_id, cancel_message)
                return

            # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ" –ø–æ—Å–ª–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
            with self.bot.retrieve_data(message.from_user.id, chat_id) as data:
                cancel_message_id = data.get('cancel_message_id')
                if cancel_message_id:
                    self.bot.edit_message_reply_markup(chat_id, cancel_message_id, reply_markup=None)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–≤–æ–¥–∞
                    if "," in translation:
                        # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –≤–≤–µ–¥–µ–Ω —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –∑–∞–ø—è—Ç—ã–º–∏
                        data['translation'] = ", ".join(translations).lower()
                    else:
                        # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –≤–≤–µ–¥–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        data['translation'] = " ".join(translations).lower()

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–µ—Ä–µ–≤–æ–¥–∞
                confirmation_markup = get_confirmation_markup()
                self.bot.send_message(
                    chat_id,
                    f"–ü—Ä–æ–≤–µ—Ä—å: {data['english_word']} ‚Äî {data['translation']}. –í—Å–µ –≤–µ—Ä–Ω–æ?",
                    reply_markup=confirmation_markup
                )
                self.bot.set_state(message.from_user.id, MyStates.waiting_for_confirmation, chat_id)

            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {data['english_word']} ‚Äî {data['translation']}")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        @self.bot.callback_query_handler(func=lambda call: call.data in ["confirm_yes", "confirm_no"])
        def confirm_word(call):
            chat_id = call.message.chat.id
            user_id = call.from_user.id
            username = call.from_user.username

            self.bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)

            if call.data == "confirm_yes":
                with self.bot.retrieve_data(user_id, chat_id) as data:
                    english_word = data['english_word']
                    translation = data['translation']

                with next(self.db.get_session()) as db_session:
                    user_manager = UserManager(db_session)
                    user = user_manager.get_or_create_user(chat_id)

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞
                    existing_word = db_session.query(Word).filter(
                        Word.user_id == user.user_id,
                        Word.target_word == english_word
                    ).first()

                    if existing_word:
                        self.bot.send_message(chat_id, f"–°–ª–æ–≤–æ '{english_word}' —É–∂–µ –µ—Å—Ç—å –≤ —Ç–≤–æ–µ–º —Å–ª–æ–≤–∞—Ä–µ ü§∑‚Äç‚ôÄÔ∏è. –í–≤–µ–¥–∏ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ.\n"
                                                       f"–ù–∞–∂–º–∏ /add –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.\n"
                                                       f"\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –Ω–∞–∂–º–∏ /my_words üìö")
                    else:
                        word = user_manager.add_word(user.user_id, english_word, translation)
                        self.reminder_scheduler.schedule_reminders(chat_id, word.word_id, english_word, translation)
                        self.bot.send_message(chat_id, f"–°–ª–æ–≤–æ '{english_word}' —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º '{translation}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n")
                        self.bot.send_message(chat_id, "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤ –Ω–∞–∂–∏–º–∞–π /add ‚úçÔ∏è\n"
                                                       "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ª–æ–≤ - /my_words üìö")
                        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
                        # self.logger.log_word(username, english_word, translation)

                self.bot.delete_message(chat_id, call.message.message_id)

            elif call.data == "confirm_no":
                # –õ–æ–≥–∏–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                cancel_markup = get_cancel_markup()
                self.bot.send_message(chat_id, "–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –µ—â–µ —Ä–∞–∑", reply_markup=cancel_markup)
                self.bot.set_state(call.from_user.id, MyStates.waiting_for_english_word, chat_id)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
        @self.bot.message_handler(commands=['delete'])
        def delete_word(message):
            chat_id = message.chat.id

            with next(self.db.get_session()) as db_session:
                user_manager = UserManager(db_session)
                user = user_manager.get_or_create_user(chat_id)

                words = user_manager.get_user_words(user.user_id)
                if not words:
                    self.bot.send_message(chat_id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤. –î–æ–±–∞–≤—å —Å–ª–æ–≤–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /add ‚úçÔ∏è")
                    return

                cancel_markup = get_cancel_markup()
                cancel_message = self.bot.send_message(chat_id, "–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å.", reply_markup=cancel_markup)
                self.bot.set_state(message.from_user.id, MyStates.waiting_for_deletion, chat_id)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                save_cancel_message_id(self.bot, message.from_user.id, chat_id, cancel_message)

        @self.bot.message_handler(state=MyStates.waiting_for_deletion)
        def process_deletion(message):
            if check_if_command(self.bot, message):
                return

            chat_id = message.chat.id
            word_to_delete = message.text.strip().lower()

            with next(self.db.get_session()) as db_session:
                user_manager = UserManager(db_session)
                user = user_manager.get_or_create_user(chat_id)

                word = user_manager.delete_word(user.user_id, word_to_delete)
                if word:
                    user_manager.delete_word(user.user_id, word_to_delete)
                    self.reminder_scheduler.cancel_reminder(word.word_id)
                    self.bot.send_message(chat_id, f"–°–ª–æ–≤–æ '{word_to_delete}' —É–¥–∞–ª–µ–Ω–æ.")
                    with self.bot.retrieve_data(message.from_user.id, chat_id) as data:
                        cancel_message_id = data.get('cancel_message_id')
                        if cancel_message_id:
                            self.bot.delete_message(chat_id, cancel_message_id)

                    self.bot.send_message(chat_id, f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ - –Ω–∞–∂–º–∏ /delete üóëÔ∏è\n"
                                                   f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ - –Ω–∞–∂–º–∏ /add ‚úçÔ∏è\n"
                                                   f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å–ª–æ–≤ –Ω–∞–∂–∏–º–∞–π /my_words üìö")
                else:
                    self.bot.send_message(chat_id, f"–°–ª–æ–≤–æ '{word_to_delete}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–≤–æ–µ–º —Å–ª–æ–≤–∞—Ä–µ.\n"
                                                   f"–ù–∞–∂–º–∏ /delete üóëÔ∏è –∏ –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.\n"
                                                   f"\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å–≤–æ–∏—Ö —Å–ª–æ–≤ –Ω–∞–∂–∏–º–∞–π /my_words üìö\n")
                    with self.bot.retrieve_data(message.from_user.id, chat_id) as data:
                        cancel_message_id = data.get('cancel_message_id')
                        if cancel_message_id:
                            self.bot.delete_message(chat_id, cancel_message_id)
                self.bot.delete_state(message.from_user.id, chat_id)

        @self.bot.message_handler(commands=['my_words'])
        def show_user_words(message):
            chat_id = message.chat.id

            with next(self.db.get_session()) as db_session:
                user_manager = UserManager(db_session)
                user = user_manager.get_or_create_user(chat_id)

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                words = user_manager.get_user_words(user.user_id)

                if not words:
                    self.bot.send_message(chat_id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤. –î–æ–±–∞–≤—å —Å–ª–æ–≤–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /add ‚úçÔ∏è")
                else:
                    word_list = "\n".join([f"üìö {idx+1}) {word.target_word} ‚Äî {word.translate_word}" for idx, word in enumerate(words)])
                    self.bot.send_message(chat_id, f"–¢–≤–æ–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n"
                                                   f"\n"
                                                   f"{word_list}")
                    self.bot.send_message(chat_id, f"\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞–∂–º–∏ /add ‚úçÔ∏è,\n"
                                                   f"–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è üóëÔ∏è - /delete"
                                                   f"\n"
                                                   f"\n‚ÑπÔ∏è –í—ã–∑–æ–≤ —Å–ø—Ä–∞–≤–∫–∏ - /help")

        @self.bot.callback_query_handler(func=lambda call: call.data == "cancel_action")
        def cancel_action(call):
            chat_id = call.message.chat.id
            user_id = call.from_user.id

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.bot.delete_state(user_id, chat_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω
            self.bot.send_message(chat_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–∂–º–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π
            self.bot.delete_message(chat_id, call.message.message_id)

    def start_bot(self):
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –±–æ—Ç–∞
        self.scheduler.start()
        self.bot.infinity_polling()